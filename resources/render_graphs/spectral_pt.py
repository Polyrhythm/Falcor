from falcor import *

def render_graph_DefaultRenderGraph():
    g = RenderGraph('DefaultRenderGraph')
    loadRenderPassLibrary('DLSSPass.dll')
    loadRenderPassLibrary('AccumulatePass.dll')
    loadRenderPassLibrary('BSDFViewer.dll')
    loadRenderPassLibrary('Antialiasing.dll')
    loadRenderPassLibrary('SpectralPathTracer.dll')
    loadRenderPassLibrary('BlitPass.dll')
    loadRenderPassLibrary('CSM.dll')
    loadRenderPassLibrary('DebugPasses.dll')
    loadRenderPassLibrary('PathTracer.dll')
    loadRenderPassLibrary('DepthPass.dll')
    loadRenderPassLibrary('ErrorMeasurePass.dll')
    loadRenderPassLibrary('SimplePostFX.dll')
    loadRenderPassLibrary('FLIPPass.dll')
    loadRenderPassLibrary('ForwardLightingPass.dll')
    loadRenderPassLibrary('GBuffer.dll')
    loadRenderPassLibrary('WhittedRayTracer.dll')
    loadRenderPassLibrary('ImageLoader.dll')
    loadRenderPassLibrary('MegakernelPathTracer.dll')
    loadRenderPassLibrary('MinimalPathTracer.dll')
    loadRenderPassLibrary('ModulateIllumination.dll')
    loadRenderPassLibrary('NRDPass.dll')
    loadRenderPassLibrary('OptixDenoiser.dll')
    loadRenderPassLibrary('PassLibraryTemplate.dll')
    loadRenderPassLibrary('PixelInspectorPass.dll')
    loadRenderPassLibrary('SkyBox.dll')
    loadRenderPassLibrary('RTXDIPass.dll')
    loadRenderPassLibrary('RTXGIPass.dll')
    loadRenderPassLibrary('SceneDebugger.dll')
    loadRenderPassLibrary('SDFEditor.dll')
    loadRenderPassLibrary('SSAO.dll')
    loadRenderPassLibrary('SVGFPass.dll')
    loadRenderPassLibrary('TemporalDelayPass.dll')
    loadRenderPassLibrary('TestPasses.dll')
    loadRenderPassLibrary('ToneMapper.dll')
    loadRenderPassLibrary('Tutorial.dll')
    loadRenderPassLibrary('Utils.dll')
    SpectralPathTracer = createPass('SpectralPathTracer', {'maxBounces': 3, 'computeDirect': True, 'useImportanceSampling': True})
    g.addPass(SpectralPathTracer, 'SpectralPathTracer')
    AccumulatePass = createPass('AccumulatePass', {'enabled': True, 'outputSize': IOSize.Default, 'autoReset': True, 'precisionMode': AccumulatePrecision.Single, 'subFrameCount': 0, 'maxAccumulatedFrames': 0})
    g.addPass(AccumulatePass, 'AccumulatePass')
    VBufferRT = createPass('VBufferRT', {'outputSize': IOSize.Default, 'samplePattern': SamplePattern.Center, 'sampleCount': 16, 'useAlphaTest': True, 'adjustShadingNormals': True, 'forceCullMode': False, 'cull': CullMode.CullBack, 'useTraceRayInline': False, 'useDOF': True})
    g.addPass(VBufferRT, 'VBufferRT')
    ToneMapper = createPass('ToneMapper', {'outputSize': IOSize.Default, 'useSceneMetadata': True, 'exposureCompensation': 0.0, 'autoExposure': False, 'filmSpeed': 100.0, 'whiteBalance': False, 'whitePoint': 6500.0, 'operator': ToneMapOp.Aces, 'clamp': True, 'whiteMaxLuminance': 1.0, 'whiteScale': 11.199999809265137, 'fNumber': 1.0, 'shutter': 1.0, 'exposureMode': ExposureMode.AperturePriority})
    g.addPass(ToneMapper, 'ToneMapper')
    PixelInspectorPass = createPass('PixelInspectorPass')
    g.addPass(PixelInspectorPass, 'PixelInspectorPass')
    GBufferRT = createPass('GBufferRT', {'outputSize': IOSize.Default, 'samplePattern': SamplePattern.Center, 'sampleCount': 16, 'useAlphaTest': True, 'adjustShadingNormals': True, 'forceCullMode': False, 'cull': CullMode.CullBack, 'texLOD': TexLODMode.Mip0, 'useTraceRayInline': False, 'useDOF': True})
    g.addPass(GBufferRT, 'GBufferRT')
    g.addEdge('SpectralPathTracer.color', 'AccumulatePass.input')
    g.addEdge('VBufferRT.vbuffer', 'SpectralPathTracer.vbuffer')
    g.addEdge('VBufferRT.viewW', 'SpectralPathTracer.viewW')
    g.addEdge('AccumulatePass.output', 'ToneMapper.src')
    g.addEdge('GBufferRT.posW', 'PixelInspectorPass.posW')
    g.addEdge('GBufferRT.normW', 'PixelInspectorPass.normW')
    g.addEdge('GBufferRT.faceNormalW', 'PixelInspectorPass.faceNormalW')
    g.addEdge('GBufferRT.tangentW', 'PixelInspectorPass.tangentW')
    g.addEdge('GBufferRT.texC', 'PixelInspectorPass.texC')
    g.addEdge('GBufferRT.texGrads', 'PixelInspectorPass.texGrads')
    g.addEdge('GBufferRT.mtlData', 'PixelInspectorPass.mtlData')
    g.addEdge('AccumulatePass.output', 'PixelInspectorPass.linColor')
    g.addEdge('ToneMapper.dst', 'PixelInspectorPass.outColor')
    g.addEdge('VBufferRT.vbuffer', 'PixelInspectorPass.vbuffer')
    g.addEdge('VBufferRT', 'PixelInspectorPass')
    g.markOutput('ToneMapper.dst')
    return g

DefaultRenderGraph = render_graph_DefaultRenderGraph()
try: m.addGraph(DefaultRenderGraph)
except NameError: None
